			+--------------------+
			|       ECE 434      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yang Zhang <zhang.yang.frank@gmail.com>
Naixuan Ma <nm538@scarletmail.rutgers.edu>
Tong Wang  <tony.wang0512@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Online sources:
[1] http://zhangyangfrank.com/log-of-bochs-qemu-and-pintos-installation-on-ubuntu-14-04/
[2] http://spsneo.com/blog/2008/08/03/how-to-install-pintos-on-qemu/
[3] https://tssurya.wordpress.com/2014/10/25/priority-scheduling-inversion-and-donation/
[4] https://pintosiiith.wordpress.com/category/pintos/
[5] https://github.com/microdog/pintos-project-1
[6] https://github.com/ryantimwilson/Pintos-Project-1
[7] https://github.com/andrei-alpha/pintos/commit/f632b1e1de37074246a25b6784a2dfb8bb826863


			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

src/devices/timer.c
	struct list sleeping_list;	/* Put the thread into this list 
					   to sleep */
src/threads/thread.h
	int wakeup_ticks;               /* Record the sleep interval or when 
					   the thread is ready to be unblocked */

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

In timer_sleep():
1) Turn off the interrupt.
2) Get the current running thread.
3) Calculate the wake up time for this thread by adding the ticks argument 
to the current ticks(since the OS boots) and store it to the new created 
variable wakeup_ticks.
4) Use the list_insert_ordered() function to add the thread into sleeping_list by 
decending order, we need to provide an LESS function. The soon to be ran thread will
stay in front of the list.
5) Block the thread.
6) Turn on the interrrupt.

In the timer interrupt handler:
We developed a function called wakeup_thread():
1) Check whether the sleeping_list is empty or not, if it's empty, there's nothing to
wake up, if it's not, we will proceed to the next step.
2) Get the frontest thread in the sleeping_list.
3) Check the thread's tick with global one(compare the time). If the thread's ticks 
value <= the OS ticks, the thread is removed from the sleeping_list and unblocked, 
if it's not, finish the check and continue the CPU task.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
We keep threads sorted in the sleeping_list when we do the insertion. Thus every time 
the handler doesn't go through the whole list to find out which thread to be unblocked, 
which minimize the amount of time spent in the handler.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
We solve the 2 problems above both by disabling the interrupt in step 1). Since the 
sleeping_list is a kernel structure, the other threads won't touch it during the 
interrupt.This will make sure threads are using this function sequentially. Race 
conditions can also be avoided.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
We try to implement the functions based on the orignal function of Pintos. We have tried
to add a new state called SLEEPING, and then changed threads state. However, it made code
much more messy and since there's a structure called ready list, we imitate it and have 
another list to keep sleeping thread.  

When it comes to sorting the list, we go through all the exsiting functions and find 
list_insert_ordered() which makes the code clean and neat. We tried our best to implement the
function and maintain the original structure.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
